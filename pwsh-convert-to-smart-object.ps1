Add-Type -Path "d:\github\planitaicojp\logical-experiment\local-proj-1\aspose-packages\Aspose.PSD.dll"
Add-Type -Path "d:\github\planitaicojp\logical-experiment\local-proj-1\aspose-packages\Aspose.Drawing.dll"
Add-Type -Path "d:\github\planitaicojp\logical-experiment\local-proj-1\aspose-packages\System.Drawing.Common.dll"

$basePngFilePath = "d:\github\planitaicojp\logical-experiment\local-proj-1\.test-method2\layer_018_machine_main_g02_#1.png"
$layerPngFilePath = "d:\github\planitaicojp\logical-experiment\local-proj-1\.test-method2\layer_080_text-all.png"
$psdFilePath = "d:\github\planitaicojp\logical-experiment\local-proj-1\.test-method2\save-image-add-layer.psd"

$psdFilePath = "d:\github\planitaicojp\logical-experiment\local-proj-1\19ce6869-2b31-4bd7-91ef-777a19854e8d.psd"
$psdFilePath = "d:\github\planitaicojp\logical-experiment\local-proj-1\22a573ba-7f07-432a-b655-3a612e68effa.psd"


$license = New-Object Aspose.PSD.License
$license.SetLicense("Aspose.PSD.NET_(2).lic.txt");
#$license.IsLicensed -eq $True

$loadOptions = New-Object Aspose.PSD.ImageLoadOptions.PsdLoadOptions
$loadOptions.LoadEffectsResource = $true
$loadOptions.UseDiskForLoadEffectsResource = $true

$img = [Aspose.PSD.Image]::Load($psdFilePath, $loadOptions)
$psd = [Aspose.PSD.FileFormats.Psd.PsdImage]$img
$layers = $psd.Layers

$opt = New-Object Aspose.PSD.ImageOptions.PngOptions
$opt.CompressionLevel = 9

$layerRect = New-Object Aspose.PSD.Rectangle(0, 0, $layers[2].Width, $layers[2].Height)
$layers[2].Save("D:\github\planitaicojp\logical-experiment\test_layer_size.png", $opt, $layerRect)


<#

try {
    Write-Host "=== Method 1: Basic SmartObjectLayer Constructor ==="

    # ÌòÑÏû¨ Î†àÏù¥Ïñ¥ Ï†ïÎ≥¥ Î∞±ÏóÖ
    $originalLayer = $layers[2]
    $layerName = $originalLayer.Name
    $layerIndex = 2

    Write-Host "Original layer: '$layerName' - Type: $($originalLayer.GetType().Name)"

    # SmartObjectLayer ÏÉùÏÑ± ÏãúÎèÑ
    $smartLayer = New-Object Aspose.PSD.FileFormats.Psd.Layers.SmartObjects.SmartObjectLayer
    $smartLayer.Name = $layerName

    Write-Host "SmartObjectLayer created successfully"
    Write-Host "SmartObjectLayer type: $($smartLayer.GetType().Name)"

    # Î†àÏù¥Ïñ¥ ÍµêÏ≤¥ ÏãúÎèÑ
    $psd.Layers[$layerIndex] = $smartLayer
    Write-Host "SUCCESS: Layer replaced with SmartObjectLayer"

} catch {
    Write-Host "Method 1 failed: $($_.Exception)"
}
=== Method 1: Basic SmartObjectLayer Constructor ===
Original layer: 'background_g00 #1' - Type: Layer
Method 1 failed: System.Management.Automation.PSArgumentException: A constructor was not found. Cannot find an appropriate constructor for type Aspose.PSD.FileFormats.Psd.Layers.SmartObjects.SmartObjectLayer.
   at System.Management.Automation.MshCommandRuntime.ThrowTerminatingError(ErrorRecord errorRecord)
PS C:\Users\tkim>

----

try {
    Write-Host "`n=== Method 2: Save Layer then Create SmartObject ==="

    # ÏûÑÏãú ÌååÏùºÏóê Î†àÏù¥Ïñ¥ Ï†ÄÏû•
    $tempImagePath = [System.IO.Path]::GetTempFileName() + ".png"
    Write-Host "Saving layer to temp file: $tempImagePath"

    # Ïù¥Ï†ÑÏóê ÏÑ±Í≥µÌïú Î∞©Î≤ïÏúºÎ°ú Î†àÏù¥Ïñ¥ Ï†ÄÏû•
    $validLeft = [Math]::Max(0, $layers[2].Left)
    $validTop = [Math]::Max(0, $layers[2].Top)
    $validWidth = $layers[2].Right - $validLeft
    $validHeight = $layers[2].Bottom - $validTop
    $rect = New-Object Aspose.PSD.Rectangle($validLeft, $validTop, $validWidth, $validHeight)

    $layers[2].Save($tempImagePath, $opt, $rect)
    Write-Host "Layer saved to temp file successfully"

    # ÏûÑÏãú ÌååÏùºÎ°úÎ∂ÄÌÑ∞ SmartObjectLayer ÏÉùÏÑ± ÏãúÎèÑ
    $fileStream = New-Object System.IO.FileStream($tempImagePath, [System.IO.FileMode]::Open)
    try {
        $smartLayer = New-Object Aspose.PSD.FileFormats.Psd.Layers.SmartObjects.SmartObjectLayer($fileStream)
        $smartLayer.Name = $layers[2].Name

        Write-Host "SmartObjectLayer created from file stream"

        # Î†àÏù¥Ïñ¥ ÍµêÏ≤¥
        $psd.Layers[2] = $smartLayer
        Write-Host "SUCCESS: Layer replaced with SmartObjectLayer from file"

    } finally {
        $fileStream.Close()
        Remove-Item $tempImagePath -Force -ErrorAction SilentlyContinue
    }

} catch {
    Write-Host "Method 2 failed: $($_.Exception)"
}

=== Method 2: Save Layer then Create SmartObject ===
Saving layer to temp file: C:\Users\tkim\AppData\Local\Temp\2\tmphcldnp.tmp.png
Layer saved to temp file successfully
Method 2 failed: System.Management.Automation.MethodInvocationException: Exception calling ".ctor" with "1" argument(s): "Update PageNumber is supported only in licensed mode"
 ---> System.ComponentModel.LicenseException: Update PageNumber is supported only in licensed mode
   at Aspose.PSD.FileFormats.Psd.Layers.LayerResources.PlacedResource(String )
   at Aspose.PSD.FileFormats.Psd.Layers.LayerResources.PlacedResource.set_PageNumber(Int32 value)
   at Aspose.PSD.FileFormats.Psd.Layers.LayerResources.SmartResourceCreator.(PlacedResource , PlacedResource)
   at Aspose.PSD.FileFormats.Psd.Layers.LayerResources.SmartResourceCreator.GeneratePlacedResource()
   at Aspose.PSD.FileFormats.Psd.Layers.SmartObjects.SmartObjectLayer.(Guid , Rectangle)
   at Aspose.PSD.FileFormats.Psd.Layers.SmartObjects.SmartObjectLayer..ctor(Stream stream)
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span`1 copyOfArgs, BindingFlags invokeAttr)
   --- End of inner exception stack trace ---
   at System.Management.Automation.DotNetAdapter.AuxiliaryConstructorInvoke(MethodInformation methodInformation, Object[] arguments, Object[] originalArguments)
   at System.Management.Automation.DotNetAdapter.ConstructorInvokeDotNet(Type type, ConstructorInfo[] constructors, Object[] arguments)
   at Microsoft.PowerShell.Commands.NewObjectCommand.CallConstructor(Type type, ConstructorInfo[] constructors, Object[] args)
PS C:\Users\tkim>

ÎùºÏù¥ÏÑºÏä§ ÌååÏùºÏùÑ Î∞õÏïÑ ÏÑ§ÏπòÌïú ÌõÑÏóêÎäî Îã§ÏùåÍ≥º Í∞ôÎã§.

=== Method 2: Save Layer then Create SmartObject ===
Saving layer to temp file: C:\Users\tkim\AppData\Local\Temp\2\tmprhpqx0.tmp.png
Layer saved to temp file successfully
SmartObjectLayer created from file stream
SUCCESS: Layer replaced with SmartObjectLayer from file


----

üß™ Î∞©Î≤ï 3: AddLayer/RemoveLayer ÏÇ¨Ïö©


try {
    Write-Host "`n=== Method 3: RemoveLayer + AddLayer ==="
    
    # ÏõêÎ≥∏ Î†àÏù¥Ïñ¥ Ï†ïÎ≥¥ Î∞±ÏóÖ
    $originalLayer = $layers[2]
    $layerName = $originalLayer.Name
    $layerBounds = $originalLayer.Bounds
    
    # ÏûÑÏãú ÌååÏùº ÏÉùÏÑ±
    $tempImagePath = [System.IO.Path]::GetTempFileName() + ".png"
    
    # Î†àÏù¥Ïñ¥Î•º Ïù¥ÎØ∏ÏßÄÎ°ú Ï†ÄÏû•
    $validLeft = [Math]::Max(0, $originalLayer.Left)
    $validTop = [Math]::Max(0, $originalLayer.Top)
    $validWidth = $originalLayer.Right - $validLeft
    $validHeight = $originalLayer.Bottom - $validTop
    $rect = New-Object Aspose.PSD.Rectangle($validLeft, $validTop, $validWidth, $validHeight)
    
    $originalLayer.Save($tempImagePath, $opt, $rect)
    
    # ÏõêÎ≥∏ Î†àÏù¥Ïñ¥ Ï†úÍ±∞
    $psd.RemoveLayer($originalLayer)
    Write-Host "Original layer removed"
    
    # ÏÉà SmartObject Î†àÏù¥Ïñ¥ ÏÉùÏÑ± Î∞è Ï∂îÍ∞Ä
    $image = [Aspose.PSD.Image]::Load($tempImagePath)
    $smartLayer = New-Object Aspose.PSD.FileFormats.Psd.Layers.SmartObjects.SmartObjectLayer($image)
    $smartLayer.Name = $layerName
    
    # ÌäπÏ†ï ÏúÑÏπòÏóê ÏÇΩÏûÖÌïòÎäî ÎåÄÏã† Ï∂îÍ∞Ä (Ïù∏Îç±Ïä§ Ï°∞Ï†ïÏùÄ ÎÇòÏ§ëÏóê)
    $psd.AddLayer($smartLayer)
    Write-Host "SmartObjectLayer added to PSD"
    
    # Ï†ïÎ¶¨
    $image.Dispose()
    Remove-Item $tempImagePath -Force -ErrorAction SilentlyContinue
    
    Write-Host "SUCCESS: Layer replaced using RemoveLayer + AddLayer method"
    
} catch {
    Write-Host "Method 3 failed: $($_.Exception.Message)"
}

----

üß™ Î∞©Î≤ï 4: Ïä§ÎßàÌä∏ Ïò§Î∏åÏ†ùÌä∏ Î¶¨ÏÜåÏä§ ÏßÅÏ†ë Ï°∞Ïûë

try {
    Write-Host "`n=== Method 4: Direct SmartObject Resource Manipulation ==="
    
    # SmartObjectLayerÏùò Îã§Î•∏ ÏÉùÏÑ±Ïûê ÏãúÎèÑ
    $smartLayer = New-Object Aspose.PSD.FileFormats.Psd.Layers.SmartObjects.SmartObjectLayer
    
    # Í∏∞Î≥∏ ÏÜçÏÑ± ÏÑ§Ï†ï
    $smartLayer.Name = $layers[2].Name
    $smartLayer.Left = $layers[2].Left
    $smartLayer.Top = $layers[2].Top
    $smartLayer.Right = $layers[2].Right
    $smartLayer.Bottom = $layers[2].Bottom
    $smartLayer.IsVisible = $layers[2].IsVisible
    $smartLayer.Opacity = $layers[2].Opacity
    
    Write-Host "SmartObjectLayer properties set"
    
    # Î†àÏù¥Ïñ¥ ÍµêÏ≤¥
    $psd.Layers[2] = $smartLayer
    Write-Host "SUCCESS: Layer replaced with configured SmartObjectLayer"
    
} catch {
    Write-Host "Method 4 failed: $($_.Exception.Message)"
}



----

try {
    Write-Host "=== Method 1: Using ReplaceContents ==="`
    
    # Smart Object Î†àÏù¥Ïñ¥ Í∞ÄÏ†∏Ïò§Í∏∞
    $smartLayer = $psd.Layers[2]
    Write-Host "Current SmartObject: $($smartLayer.Name)"
    
    # ÍµêÏ≤¥Ìï† PNG ÌååÏùº Í≤ΩÎ°ú
    $newPngPath = "D:\github\planitaicojp\logical-experiment\local-proj-1\.test-method2\layer_080_text-all.png"
    
    if (-not (Test-Path $newPngPath)) {
        Write-Host "ERROR: PNG file not found: $newPngPath"
        return
    }
    
    # ÏÉà Ïù¥ÎØ∏ÏßÄ Î°úÎìú
    $newImage = [Aspose.PSD.Image]::Load($newPngPath)
    Write-Host "New image loaded: $($newImage.Width)x$($newImage.Height)"
    
    # SmartObject ÎÇ¥Ïö© ÍµêÏ≤¥
    $smartLayer.ReplaceContents($newImage)
    Write-Host "SUCCESS: SmartObject contents replaced!"
    
    # Î©îÎ™®Î¶¨ Ï†ïÎ¶¨
    $newImage.Dispose()
    
} catch {
    Write-Host "Method 1 failed: $($_.Exception.Message)"
}

#>

$psd.Save("d:\github\planitaicojp\logical-experiment\local-proj-1\.test-fixed\testtest.psd")


    # ÏûÑÏãú ÌååÏùºÏóê Î†àÏù¥Ïñ¥ Ï†ÄÏû•
    $tempImagePath = [System.IO.Path]::GetTempFileName() + ".png"
    Write-Host "Saving layer to temp file: $tempImagePath"

    # Ïù¥Ï†ÑÏóê ÏÑ±Í≥µÌïú Î∞©Î≤ïÏúºÎ°ú Î†àÏù¥Ïñ¥ Ï†ÄÏû•
    $validLeft = [Math]::Max(0, $layers[2].Left)
    $validTop = [Math]::Max(0, $layers[2].Top)
    $validWidth = $layers[2].Right - $validLeft
    $validHeight = $layers[2].Bottom - $validTop
    $rect = New-Object Aspose.PSD.Rectangle($validLeft, $validTop, $validWidth, $validHeight)

    $layers[2].Save($tempImagePath, $opt, $rect)
    Write-Host "Layer saved to temp file successfully"

    # ÏûÑÏãú ÌååÏùºÎ°úÎ∂ÄÌÑ∞ SmartObjectLayer ÏÉùÏÑ± ÏãúÎèÑ
    $fileStream = New-Object System.IO.FileStream($tempImagePath, [System.IO.FileMode]::Open)


        $smartLayer = New-Object Aspose.PSD.FileFormats.Psd.Layers.SmartObjects.SmartObjectLayer($fileStream)
        $smartLayer.Name = $layers[2].Name

        Write-Host "SmartObjectLayer created from file stream"

        # Î†àÏù¥Ïñ¥ ÍµêÏ≤¥
        $psd.Layers[2] = $smartLayer
        Write-Host "SUCCESS: Layer replaced with SmartObjectLayer from file"


        $psd.InsertLayer(2, $smartLayer)
        $psd.RemoveLayer($originalLayer)



$newPngPath = "d:\github\planitaicojp\logical-experiment\local-proj-1\.test-method2\layer_001_background_g00_#1.png"
    $newImage = [Aspose.PSD.Image]::Load($newPngPath)
    $smartLayer = $psd.Layers[2]
     $smartLayer.ReplaceContents($newImage)
$psd.Save("d:\github\planitaicojp\logical-experiment\local-proj-1\.test-fixed\testtest2.psd")